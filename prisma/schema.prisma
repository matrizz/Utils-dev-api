generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  username  String   @unique
  avatar    String?
  role      String   @default("developer")
  bio       String?
  location  String?
  website   String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]
  tasks    Task[]
  comments Comment[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  repository  String?
  homepage    String?
  language    String?
  framework   String?
  status      String   @default("active")
  isPublic    Boolean  @default(true)
  stars       Int      @default(0)
  forks       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  owner        User         @relation(fields: [ownerId], references: [id])
  tasks        Task[]
  technologies Technology[]
  comments     Comment[]
  releases     Release[]

  @@map("projects")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo")
  priority    String   @default("medium")
  type        String   @default("feature")
  labels      String   @default("")
  estimatedHours Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime?
  completedAt DateTime?
  projectId   String
  assigneeId  String?

  project  Project @relation(fields: [projectId], references: [id])
  assignee User?   @relation(fields: [assigneeId], references: [id])
  comments Comment[]

  @@map("tasks")
}

model Technology {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  website     String?
  logo        String?
  version     String?
  popularity  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects Project[]
  articles Article[]

  @@map("technologies")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  readingTime Int      @default(5)
  category    String
  tags        String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  technologies Technology[]
  comments     Comment[]

  @@map("articles")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  projectId String?
  taskId    String?
  articleId String?

  author  User     @relation(fields: [authorId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  task    Task?    @relation(fields: [taskId], references: [id])
  article Article? @relation(fields: [articleId], references: [id])

  @@map("comments")
}

model Release {
  id          String   @id @default(cuid())
  version     String
  name        String?
  description String?
  changelog   String?
  isPrerelease Boolean @default(false)
  isDraft     Boolean @default(false)
  downloads   Int     @default(0)
  createdAt   DateTime @default(now())
  publishedAt DateTime?
  projectId   String

  project Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, version])
  @@map("releases")
}

model CodeSnippet {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String
  language    String
  category    String
  tags        String   @default("")
  upvotes     Int      @default(0)
  views       Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("code_snippets")
}

model ToolRecommendation {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  website     String?
  price       String   @default("free")
  platform    String   @default("cross-platform")
  rating      Float    @default(0.0)
  pros        String   @default("")
  cons        String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tool_recommendations")
}
